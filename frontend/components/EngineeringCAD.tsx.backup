'use client';

import React, { useState, useRef, useEffect } from 'react';
import dynamic from 'next/dynamic';
import { PYTHON_TEMPLATE, SYSTEM_PROMPT_ANALYSIS, SYSTEM_PROMPT_CODE_GEN, SYSTEM_PROMPT_DESIGN_SUMMARY } from '@/lib/constants';
import DesignSummary from './DesignSummary';
import { Button } from './ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Input } from './ui/input';
import { Badge } from './ui/badge';
import { ScrollArea } from './ui/scroll-area';
import { Separator } from './ui/separator';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from './ui/collapsible';
import { Loader2, Send, Download, ChevronRight, Code2, RefreshCw, Sparkles, Ruler, FileCode } from 'lucide-react';

// Dynamically import Monaco Editor and DXF Viewer (client-side only)
const MonacoEditor = dynamic(() => import('@monaco-editor/react'), { ssr: false });
const DXFViewer = dynamic(() => import('./DXFViewer'), { ssr: false });

interface Message {
  role: 'user' | 'assistant';
  content: string;
  timestamp: Date;
}

interface Status {
  stage: 'idle' | 'analyzing' | 'generating' | 'executing' | 'fixing' | 'success' | 'error';
  message: string;
}

interface Stats {
  entities: number;
  layers: number;
  bounds?: {
    min_x: number;
    min_y: number;
    max_x: number;
    max_y: number;
  };
}

export default function EngineeringCAD() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');
  const [status, setStatus] = useState<Status>({ stage: 'idle', message: 'Ready' });
  const [pythonCode, setPythonCode] = useState(PYTHON_TEMPLATE);
  const [dxf, setDxf] = useState<string>('');
  const [stats, setStats] = useState<Stats | null>(null);
  const [error, setError] = useState<string>('');
  const [conversationHistory, setConversationHistory] = useState<any[]>([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [executionLog, setExecutionLog] = useState<string[]>([]);
  const [showPythonCode, setShowPythonCode] = useState(false);
  const [designSummary, setDesignSummary] = useState<any>(null);
  
  const chatEndRef = useRef<HTMLDivElement>(null);
  const editorRef = useRef<any>(null);

  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const addMessage = (role: 'user' | 'assistant', content: string) => {
    setMessages(prev => [...prev, { role, content, timestamp: new Date() }]);
  };

  const callClaude = async (
    userMessage: string,
    systemPrompt: string,
    isCodeGen: boolean = false,
    errorContext: string | null = null
  ): Promise<string> => {
    const response = await fetch('/api/claude', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userMessage,
        systemPrompt,
        isCodeGen,
        conversationHistory,
        errorContext
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to call Claude API');
    }

    const data = await response.json();
    
    // Update conversation history
    setConversationHistory(prev => [
      ...prev,
      { role: 'user', content: userMessage },
      { role: 'assistant', content: data.content }
    ]);

    return data.content;
  };

  const generateDesignSummary = async (analysisText: string, userPrompt: string) => {
    try {
      const summaryPrompt = `Based on the following engineering analysis and user request, create a professional design summary.

User Request: ${userPrompt}

Engineering Analysis:
${analysisText}

Return a JSON object with the design summary.`;

      const response = await fetch('/api/claude', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          userMessage: summaryPrompt,
          systemPrompt: SYSTEM_PROMPT_DESIGN_SUMMARY,
          isCodeGen: false
        })
      });

      if (!response.ok) {
        throw new Error('Failed to generate design summary');
      }

      const data = await response.json();
      const jsonMatch = data.content.match(/```json\n([\s\S]*?)```/) || data.content.match(/{[\s\S]*}/);
      
      if (jsonMatch) {
        const jsonStr = jsonMatch[1] || jsonMatch[0];
        const summary = JSON.parse(jsonStr);
        setDesignSummary(summary);
      }
    } catch (error) {
      console.error('Design summary generation failed:', error);
      // Don't block the main flow if summary fails
    }
  };

  const executeDXFCode = async (fullCode: string, attempt: number = 1, maxAttempts: number = 3): Promise<any> => {
    setStatus({ stage: 'executing', message: `Executing DXF code (attempt ${attempt}/${maxAttempts})...` });
    setExecutionLog(prev => [...prev, `Attempt ${attempt}/${maxAttempts}: Executing code...`]);
    
    try {
      const response = await fetch('/api/execute-dxf', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ code: fullCode, max_retries: 1 })
      });

      const result = await response.json();
      
      if (result.success) {
        setDxf(result.dxf);
        setStats(result.stats);
        setError('');
        setExecutionLog(prev => [...prev, `✓ Success: Generated ${result.stats.entities} entities in ${result.stats.layers} layers`]);
        setStatus({ stage: 'success', message: 'DXF generated successfully!' });
        return { success: true, result };
      } else {
        setExecutionLog(prev => [...prev, `✗ Error: ${result.error}`]);
        
        // If we have retries left, try to fix the code
        if (attempt < maxAttempts) {
          setStatus({ stage: 'fixing', message: 'Code error detected, fixing...' });
          setExecutionLog(prev => [...prev, `Asking Claude to fix the error...`]);
          
          // Ask Claude to fix the error
          const fixedCode = await callClaude(
            fullCode,  // Send the full code context for fixing
            SYSTEM_PROMPT_CODE_GEN,
            true,
            result.error
          );
          
          // Extract code from response
          const codeMatch = fixedCode.match(/```python\n([\s\S]*?)```/) || fixedCode.match(/```\n([\s\S]*?)```/);
          const extractedCode = codeMatch ? codeMatch[1] : fixedCode;
          
          const fixedFullCode = PYTHON_TEMPLATE + '\n' + extractedCode;
          setPythonCode(fixedFullCode);
          
          // Retry execution
          return await executeDXFCode(fixedFullCode, attempt + 1, maxAttempts);
        }
        
        setError(result.error);
        setStatus({ stage: 'error', message: 'Failed to generate DXF after all retries' });
        return { success: false, error: result.error };
      }
    } catch (err: any) {
      setExecutionLog(prev => [...prev, `✗ Exception: ${err.message}`]);
      setError(err.message);
      setStatus({ stage: 'error', message: 'Failed to connect to backend' });
      return { success: false, error: err.message };
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputValue.trim() || isProcessing) return;

    const userMessage = inputValue.trim();
    setInputValue('');
    addMessage('user', userMessage);
    setIsProcessing(true);
    setExecutionLog([]);
    setError('');

    try {
      // Step 1: Analyze the engineering problem
      setStatus({ stage: 'analyzing', message: 'Analyzing engineering requirements...' });
      const analysisResponse = await callClaude(userMessage, SYSTEM_PROMPT_ANALYSIS, false);
      addMessage('assistant', analysisResponse);

      // Check if Claude is asking for more information
      if (analysisResponse.toLowerCase().includes('could you') || 
          analysisResponse.toLowerCase().includes('please provide') ||
          analysisResponse.toLowerCase().includes('what is') ||
          analysisResponse.toLowerCase().includes('clarify')) {
        setStatus({ stage: 'idle', message: 'Waiting for more information...' });
        setIsProcessing(false);
        return;
      }

      // Generate design summary in parallel (don't await - let it run in background)
      generateDesignSummary(analysisResponse, userMessage);

      // Step 2: Generate Python code
      setStatus({ stage: 'generating', message: 'Generating Python code...' });
      const codePrompt = `Based on this engineering analysis, generate Python code using ezdxf to create the CAD drawing.

Analysis:
${analysisResponse}

Requirements:
- Add code ONLY after the "# ========== DRAWING SECTION - EDIT BELOW ==========" line
- Use DRAWING_AREA constants for positioning
- Include all dimensions
- Add proper annotations and labels
- Use appropriate layers
- Generate complete, production-ready code

Return ONLY the Python code to add after the drawing section marker, wrapped in \`\`\`python blocks.`;

      const codeResponse = await callClaude(codePrompt, SYSTEM_PROMPT_CODE_GEN, true);

      // Extract Python code from response
      const codeMatch = codeResponse.match(/```python\n([\s\S]*?)```/) || codeResponse.match(/```\n([\s\S]*?)```/);
      const extractedCode = codeMatch ? codeMatch[1] : codeResponse;

      const fullCode = PYTHON_TEMPLATE + '\n' + extractedCode;
      setPythonCode(fullCode);

      // Step 3: Execute the code with retry logic
      await executeDXFCode(fullCode);

    } catch (err: any) {
      console.error('Error:', err);
      setError(err.message);
      setStatus({ stage: 'error', message: err.message });
      addMessage('assistant', `Error: ${err.message}`);
    } finally {
      setIsProcessing(false);
    }
  };

  const handleCodeChange = (value: string | undefined) => {
    if (value !== undefined) {
      setPythonCode(value);
    }
  };

  const handleRegenerate = async () => {
    if (isProcessing) return;
    
    setIsProcessing(true);
    setExecutionLog([]);
    setError('');

    try {
      // Use the full code from Monaco editor (user may have edited it)
      await executeDXFCode(pythonCode);
    } catch (err: any) {
      setError(err.message);
      setStatus({ stage: 'error', message: err.message });
    } finally {
      setIsProcessing(false);
    }
  };

  const downloadDXF = () => {
    if (!dxf) return;
    
    const blob = new Blob([dxf], { type: 'application/dxf' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `engineering-cad-${Date.now()}.dxf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const getStatusColor = () => {
    switch (status.stage) {
      case 'success': return 'bg-emerald-500';
      case 'error': return 'bg-red-500';
      case 'idle': return 'bg-muted-foreground';
      default: return 'bg-primary animate-pulse';
    }
  };

  return (
    <div className="flex flex-col h-screen bg-background">
      {/* Header */}
      <header className="border-b px-6 py-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className="flex items-center justify-center w-10 h-10 rounded-xl bg-gradient-to-br from-primary to-blue-600">
              <Ruler className="w-6 h-6 text-primary-foreground" />
            </div>
            <div>
              <h1 className="text-lg font-semibold">Engineering CAD AI</h1>
              <p className="text-sm text-muted-foreground">AI-powered design generation</p>
            </div>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex items-center gap-3">
              <div className={`w-2 h-2 rounded-full ${getStatusColor()}`} />
              <span className="text-sm text-muted-foreground">{status.message}</span>
            </div>
            {stats && (
              <div className="flex items-center gap-4">
                <Badge variant="outline" className="gap-1.5">
                  <FileCode className="w-3 h-3" />
                  {stats.entities} entities
                </Badge>
                <Badge variant="outline" className="gap-1.5">
                  <Ruler className="w-3 h-3" />
                  {stats.layers} layers
                </Badge>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-4">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-[#3b82f6] to-[#2563eb] flex items-center justify-center">
                <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
                </svg>
              </div>
              <div>
                <h1 className="text-lg font-semibold text-[#fafafa]">Engineering CAD AI</h1>
                <p className="text-xs text-[#71717a]">AI-powered design generation</p>
              </div>
            </div>
          </div>
          <div className="flex items-center gap-6">
            <div className="flex items-center gap-3">
              <div className={`w-2 h-2 rounded-full ${getStatusColor()}`}></div>
              <span className="text-sm text-[#a1a1aa]">{status.message}</span>
            </div>
            {stats && (
              <div className="flex items-center gap-4 text-xs text-[#71717a]">
                <span className="flex items-center gap-1.5">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343" />
                  </svg>
                  {stats.entities} entities
                </span>
                <span className="flex items-center gap-1.5">
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 5a1 1 0 011-1h14a1 1 0 011 1v2a1 1 0 01-1 1H5a1 1 0 01-1-1V5zM4 13a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H5a1 1 0 01-1-1v-6zM16 13a1 1 0 011-1h2a1 1 0 011 1v6a1 1 0 01-1 1h-2a1 1 0 01-1-1v-6z" />
                  </svg>
                  {stats.layers} layers
                </span>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="flex flex-1 overflow-hidden">
        {/* Left Panel: Chat (40%) */}
        <div className="w-2/5 flex flex-col border-r border-[#27272a]">
          <div className="flex-1 overflow-y-auto p-6 space-y-4">
            {messages.length === 0 && (
              <div className="text-center mt-12">
                <div className="w-16 h-16 mx-auto mb-6 rounded-2xl bg-gradient-to-br from-[#3b82f6]/20 to-[#2563eb]/20 flex items-center justify-center">
                  <svg className="w-8 h-8 text-[#3b82f6]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                  </svg>
                </div>
                <h2 className="text-xl font-semibold text-[#fafafa] mb-3">Start a new design</h2>
                <p className="text-sm text-[#a1a1aa] mb-8 max-w-sm mx-auto">
                  Describe your engineering problem and I'll generate a professional CAD drawing with dimensions and analysis.
                </p>
                <div className="text-left max-w-md mx-auto space-y-3">
                  <p className="text-xs font-semibold text-[#71717a] uppercase tracking-wider mb-3">Example prompts</p>
                  {[
                    'Design a simply supported beam 5m long with 10kN point load at center',
                    'Create a rectangular steel plate 200×150mm with 4 mounting holes',
                    'Draw a cantilever beam with dimensions and load diagram'
                  ].map((example, idx) => (
                    <button
                      key={idx}
                      onClick={() => setInputValue(example)}
                      className="w-full text-left p-3 rounded-lg bg-[#18181b] border border-[#27272a] hover:border-[#3b82f6] transition-colors text-sm text-[#a1a1aa] hover:text-[#fafafa]"
                    >
                      {example}
                    </button>
                  ))}
                </div>
              </div>
            )}
            {messages.map((msg, idx) => (
              <div key={idx} className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}>
                <div className={`max-w-[85%] rounded-2xl px-4 py-3 ${
                  msg.role === 'user' 
                    ? 'bg-[#3b82f6] text-white' 
                    : 'bg-[#18181b] border border-[#27272a] text-[#fafafa]'
                }`}>
                  <p className="text-sm leading-relaxed whitespace-pre-wrap">{msg.content}</p>
                  <p className="text-xs opacity-60 mt-2">
                    {msg.timestamp.toLocaleTimeString()}
                  </p>
                </div>
              </div>
            ))}
            {isProcessing && (
              <div className="flex justify-start">
                <div className="bg-[#18181b] border border-[#27272a] rounded-2xl px-4 py-3">
                  <div className="flex items-center gap-3">
                    <div className="spinner"></div>
                    <span className="text-sm text-[#a1a1aa]">{status.message}</span>
                  </div>
                </div>
              </div>
            )}
            <div ref={chatEndRef} />
          </div>

          {/* Execution Log (compact) */}
          {executionLog.length > 0 && error && (
            <div className="border-t border-[#27272a] p-4 bg-[#18181b]/50 max-h-24 overflow-y-auto">
              <p className="text-xs font-semibold text-[#71717a] mb-2">Execution Log</p>
              {executionLog.slice(-3).map((log, idx) => (
                <p key={idx} className="text-xs text-[#52525b] font-mono">{log}</p>
              ))}
            </div>
          )}

          {/* Modern Chat Input */}
          <div className="border-t border-[#27272a] p-4 bg-[#18181b]">
            <form onSubmit={handleSubmit} className="flex gap-3">
              <input
                type="text"
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                placeholder="Describe your engineering problem..."
                disabled={isProcessing}
                className="flex-1 bg-[#0a0a0a] text-[#fafafa] px-4 py-3 rounded-xl border border-[#27272a] focus:outline-none focus:border-[#3b82f6] focus:ring-1 focus:ring-[#3b82f6] disabled:opacity-50 placeholder:text-[#52525b] text-sm"
              />
              <button
                type="submit"
                disabled={isProcessing || !inputValue.trim()}
                className="bg-gradient-to-r from-[#3b82f6] to-[#2563eb] hover:from-[#2563eb] hover:to-[#1d4ed8] text-white px-6 py-3 rounded-xl font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-all text-sm shadow-lg shadow-[#3b82f6]/20"
              >
                {isProcessing ? 'Processing...' : 'Generate'}
              </button>
            </form>
          </div>
        </div>

        {/* Right Panel: DXF Viewer + Design Summary + Collapsible Code (60%) */}
        <div className="w-3/5 flex flex-col">
          {/* Top Section: DXF Viewer + Design Summary */}
          <div className="flex-1 flex overflow-hidden">
            {/* DXF Viewer (Left, 60% of right panel) */}
            <div className="w-3/5 flex flex-col border-r border-[#27272a]">
              <div className="flex items-center justify-between bg-[#18181b] px-4 py-3 border-b border-[#27272a]">
                <h2 className="text-sm font-semibold text-[#fafafa]">CAD Drawing</h2>
                <button
                  onClick={downloadDXF}
                  disabled={!dxf}
                  className="flex items-center gap-2 bg-[#3b82f6] hover:bg-[#2563eb] text-white px-3 py-1.5 rounded-lg text-xs font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
                  </svg>
                  Download DXF
                </button>
              </div>
              <div className="flex-1 overflow-auto p-6">
                {error && (
                  <div className="bg-[#ef4444]/10 border border-[#ef4444]/30 rounded-xl p-4 mb-4">
                    <div className="flex items-start gap-3">
                      <svg className="w-5 h-5 text-[#ef4444] flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                      </svg>
                      <div>
                        <p className="text-sm font-semibold text-[#ef4444] mb-1">Error</p>
                        <pre className="text-xs text-[#fca5a5] whitespace-pre-wrap font-mono">{error}</pre>
                      </div>
                    </div>
                  </div>
                )}
                {dxf ? (
                  <DXFViewer dxfContent={dxf} stats={stats || undefined} />
                ) : (
                  <div className="flex items-center justify-center h-full">
                    <div className="text-center">
                      <div className="w-20 h-20 mx-auto mb-6 rounded-2xl bg-[#27272a] flex items-center justify-center">
                        <svg className="w-10 h-10 text-[#52525b]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                      </div>
                      <p className="text-sm text-[#a1a1aa] mb-2">No drawing generated yet</p>
                      <p className="text-xs text-[#71717a]">Start by describing your engineering problem</p>
                    </div>
                  </div>
                )}
              </div>
            </div>

            {/* Design Summary (Right, 40% of right panel) */}
            <div className="w-2/5 flex flex-col bg-[#0a0a0a]">
              <div className="flex-1 overflow-y-auto p-6">
                <DesignSummary summary={designSummary} />
              </div>
            </div>
          </div>

          {/* Bottom Section: Collapsible Python Code Editor */}
          <div className="border-t border-[#27272a]">
            {/* Collapsible Header */}
            <button
              onClick={() => setShowPythonCode(!showPythonCode)}
              className="w-full flex items-center justify-between bg-[#18181b] px-4 py-3 hover:bg-[#27272a] transition-colors"
            >
              <div className="flex items-center gap-3">
                <svg
                  className={`w-4 h-4 text-[#71717a] transition-transform ${showPythonCode ? 'rotate-90' : ''}`}
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
                <h3 className="text-sm font-semibold text-[#fafafa]">Python Code</h3>
                <span className="text-xs text-[#71717a]">Advanced</span>
              </div>
              {showPythonCode && (
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleRegenerate();
                  }}
                  disabled={isProcessing || !pythonCode}
                  className="flex items-center gap-2 bg-[#10b981] hover:bg-[#059669] text-white px-3 py-1.5 rounded-lg text-xs font-medium disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                >
                  <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                  </svg>
                  {isProcessing ? 'Processing...' : 'Redraw'}
                </button>
              )}
            </button>

            {/* Python Editor (Collapsible) */}
            {showPythonCode && (
              <div className="h-80 bg-[#1e1e1e]">
                <MonacoEditor
                  height="100%"
                  language="python"
                  theme="vs-dark"
                  value={pythonCode}
                  onChange={handleCodeChange}
                  options={{
                    minimap: { enabled: false },
                    fontSize: 13,
                    lineNumbers: 'on',
                    scrollBeyondLastLine: false,
                    automaticLayout: true,
                    tabSize: 4,
                    wordWrap: 'on',
                  }}
                  onMount={(editor) => {
                    editorRef.current = editor;
                  }}
                />
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

